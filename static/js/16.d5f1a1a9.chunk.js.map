{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","ConnectorEvent","emitError","emitDeactivate","URI_AVAILABLE","UserRejectedRequestError","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","Object","k","Number","handleChainChanged","this","chainId","handleAccountsChanged","account","accounts","handleDisconnect","error","provider","connected","walletConnectProvider","m","WalletConnectProvider","e","deactivate"],"mappings":"8JAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,Y,KAIR,KAAUC,IAAV,W,EAlBJ,UAqBYC,Y,KAIR,KAAUD,IAAV,U,EAzBJ,eA4BYE,W,KAIR,KAAUF,IAAV,a,EAhCJ,kB,wkDACaG,EAAgB,gBAEhBC,EAAb,YACE,a,aACE,sBACA,KAAY,cAAZ,KACA,2C,EAJJ,2BAeaC,EAAb,YAQE,c,MAAcC,QAAKC,WAAQC,WAAQC,oB,OACjC,IAAUC,uBAAV,iBACA,cAAM,CAAEZ,kBAAmBY,OAAA,aAAqB,SAAAC,GAAC,OAAIC,OAAJ,SAAjD,MAEA,MACA,WACA,WACA,oBAEA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,IACA,mBAAwB,0BAAxB,I,EAnBJ,qDAsBUC,YAINC,KAAA,WAAgB,CAAEC,aA1BtB,wBA6BUC,YAINF,KAAA,WAAgB,CAAEG,QAASC,EAAS,MAjCxC,mBAoCUC,WAINL,KAAA,iBAEIA,KAAJ,wBACEA,KAAA,6BACAA,KAAA,oDAA0DA,KAA1D,oBACAA,KAAA,uDAA6DA,KAA7D,uBACAA,KAAA,8BAGFA,KAAA,kBAjDJ,0B,MAqDSA,K,iDAgBiB,uCAEd,mBAAgCI,EAAhC,MAFc,OAGb,YAEL,yBAAIE,UACF,MAAM,IAAN,EAGF,YATkB,eAAhBH,GAgBN,OAJA,wCAA4C,EAA5C,kBACA,0CAA8C,EAA9C,oBACA,6CAAiD,EAAjD,uBAEO,CAAEI,SAAU,EAAZ,sBAAwCJ,c,qBArB1C,2BAA8BK,U,uBAC3B,yCAA4C,CAAEP,QAASH,OAAOF,YAAY,EAAZA,KAAD,OAA7D,iBACN,SAAyB,2BAAzB,Q,oDAbG,EAAKa,sB,uBAC4B,uEAA4C,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,QAA7C,eAA9BC,GACN,wBAA6B,IAAIA,EAAsB,CACrDlB,OAAQ,EAD6C,OAErDD,IAAK,EAFgD,IAGrDE,OAAQ,EAH6C,OAIrDC,gBAAiB,EAAKA,qB,mDA3D9B,MAAAiB,GAAA,sBAAAA,KAAA,6BAyFI,uBAAOZ,KAAP,uBAzFJ,MAAAY,GAAA,sBAAAA,KAAA,4BA6FI,uBAAOZ,KAAA,2BAAP,gBA7FJ,MAAAY,GAAA,sBAAAA,KAAA,4BAiGI,uBAAOZ,KAAA,iDAAqD,mBAAgCI,EAAhC,OAjGhE,MAAAQ,GAAA,sBAAAA,KAAA,aAoGSC,WACDb,KAAJ,wBACEA,KAAA,6BACAA,KAAA,kDAAwDA,KAAxD,kBACAA,KAAA,oDAA0DA,KAA1D,oBACAA,KAAA,uDAA6DA,KAA7D,yBAzGN,uB,6BA8GeS,O,EAALT,KAAKS,8BAAL,gCA9GV,MAAAG,GAAA,sBAAAA,KAAA","file":"static/js/16.d5f1a1a9.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\ninterface WalletConnectConnectorArguments {\n  rpc: { [chainId: number]: string }\n  bridge?: string\n  qrcode?: boolean\n  pollingInterval?: number\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly rpc: { [chainId: number]: string }\n  private readonly bridge?: string\n  private readonly qrcode?: boolean\n  private readonly pollingInterval?: number\n\n  public walletConnectProvider?: any\n\n  constructor({ rpc, bridge, qrcode, pollingInterval }: WalletConnectConnectorArguments) {\n    invariant(Object.keys(rpc).length === 1, '@walletconnect/web3-provider is broken with >1 chainId, please use 1')\n    super({ supportedChainIds: Object.keys(rpc).map(k => Number(k)) })\n\n    this.rpc = rpc\n    this.bridge = bridge\n    this.qrcode = qrcode\n    this.pollingInterval = pollingInterval\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider({\n        bridge: this.bridge,\n        rpc: this.rpc,\n        qrcode: this.qrcode,\n        pollingInterval: this.pollingInterval\n      })\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession({ chainId: Number(Object.keys(this.rpc)[0]) })\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n"],"sourceRoot":""}